#!/usr/bin/env node

// Main setup script for AI Template Generator CLI

const fs = require('fs');
const path = require('path');

// Load environment variables from .env file
try {
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const envLines = envContent.split('\n');
    for (const line of envLines) {
      if (line.trim() && !line.startsWith('#')) {
        const [key, value] = line.split('=');
        if (key && value) {
          process.env[key.trim()] = value.trim();
        }
      }
    }
    console.log('Environment variables loaded from .env file');
  }
} catch (error) {
  console.error('Error loading .env file:', error.message);
}

const inquirer = require('inquirer');
const prompt = inquirer.createPromptModule();
const axios = require('axios');

// Supported technologies
const frontendChoices = {
  'React': ['Base', 'React + Vite', 'Next.js', 'Create React App'],
  'Vue': ['Vue 3', 'Vue 2', 'Vue + Vite', 'Nuxt.js'],
  'Angular': ['Angular CLI', 'Angular + Standalone Components']
};

const backendChoices = {
  'Node.js': ['Express', 'Koa', 'Fastify', 'NestJS'],
  'PHP': ['Laravel', 'PHP Base', 'Symfony', 'Slim'],
  'Python': ['Django', 'Flask', 'FastAPI']
};

const cssFrameworks = ['None', 'Bootstrap', 'Tailwind CSS', 'Material UI', 'Bulma'];

// Ask user for project preferences with navigation capabilities
async function askPreferences() {
  let answers = {
    projectType: null,
    frontend: null,
    frontendFramework: null,
    backend: null,
    backendFramework: null,
    cssFramework: null,
    projectPath: null
  };
  
  // Project type selection with confirmation
  let projectTypeConfirmed = false;
  while (!projectTypeConfirmed) {
    const stackType = await prompt([
      {
        type: 'list',
        name: 'type',
        message: 'What type of project do you want to generate?',
        choices: [
          { name: 'Frontend only', value: 'frontend' },
          { name: 'Backend only', value: 'backend' },
          { name: 'Full stack (frontend + backend)', value: 'fullstack' }
        ]
      }
    ]);
    
    // Confirm selection
    const confirmChoice = await prompt([
      {
        type: 'list',
        name: 'confirm',
        message: `You selected: ${stackType.type}. Is this correct?`,
        choices: [
          { name: 'Yes, continue', value: true },
          { name: 'No, choose again', value: false }
        ]
      }
    ]);
    
    if (confirmChoice.confirm) {
      answers.projectType = stackType.type;
      projectTypeConfirmed = true;
    }
  }
  
  // Frontend technology selection if needed
  if (['frontend', 'fullstack'].includes(answers.projectType)) {
    let frontendConfirmed = false;
    
    while (!frontendConfirmed) {
      const frontendAnswer = await prompt([
        {
          type: 'list',
          name: 'tech',
          message: 'Choose a frontend technology:',
          choices: Object.keys(frontendChoices)
        }
      ]);
      
      // Confirm selection
      const confirmChoice = await prompt([
        {
          type: 'list',
          name: 'confirm',
          message: `You selected: ${frontendAnswer.tech}. Is this correct?`,
          choices: [
            { name: 'Yes, continue', value: true },
            { name: 'No, choose again', value: false }
          ]
        }
      ]);
      
      if (confirmChoice.confirm) {
        answers.frontend = frontendAnswer.tech;
        frontendConfirmed = true;
      }
    }
    
    // Framework selection with confirmation
    let frameworkConfirmed = false;
    
    while (!frameworkConfirmed) {
      const frameworkAnswer = await prompt([
        {
          type: 'list',
          name: 'framework',
          message: `Choose ${answers.frontend} framework/version:`,
          choices: frontendChoices[answers.frontend]
        }
      ]);
      
      // Confirm selection
      const confirmChoice = await prompt([
        {
          type: 'list',
          name: 'confirm',
          message: `You selected: ${frameworkAnswer.framework}. Is this correct?`,
          choices: [
            { name: 'Yes, continue', value: true },
            { name: 'No, choose again', value: false }
          ]
        }
      ]);
      
      if (confirmChoice.confirm) {
        answers.frontendFramework = frameworkAnswer.framework;
        frameworkConfirmed = true;
      }
    }
    
    // CSS Framework selection with confirmation
    let cssConfirmed = false;
    
    while (!cssConfirmed) {
      const cssAnswer = await prompt([
        {
          type: 'list',
          name: 'css',
          message: 'Choose a CSS framework:',
          choices: cssFrameworks
        }
      ]);
      
      // Confirm selection
      const confirmChoice = await prompt([
        {
          type: 'list',
          name: 'confirm',
          message: `You selected: ${cssAnswer.css}. Is this correct?`,
          choices: [
            { name: 'Yes, continue', value: true },
            { name: 'No, choose again', value: false }
          ]
        }
      ]);
      
      if (confirmChoice.confirm) {
        answers.cssFramework = cssAnswer.css;
        cssConfirmed = true;
      }
    }
  }
  
  // Backend technology selection if needed
  if (['backend', 'fullstack'].includes(answers.projectType)) {
    let backendConfirmed = false;
    
    while (!backendConfirmed) {
      const backendAnswer = await prompt([
        {
          type: 'list',
          name: 'tech',
          message: 'Choose a backend technology:',
          choices: Object.keys(backendChoices)
        }
      ]);
      
      // Confirm selection
      const confirmChoice = await prompt([
        {
          type: 'list',
          name: 'confirm',
          message: `You selected: ${backendAnswer.tech}. Is this correct?`,
          choices: [
            { name: 'Yes, continue', value: true },
            { name: 'No, choose again', value: false }
          ]
        }
      ]);
      
      if (confirmChoice.confirm) {
        answers.backend = backendAnswer.tech;
        backendConfirmed = true;
      }
    }
    
    // Framework selection with confirmation
    let frameworkConfirmed = false;
    
    while (!frameworkConfirmed) {
      const frameworkAnswer = await prompt([
        {
          type: 'list',
          name: 'framework',
          message: `Choose ${answers.backend} framework:`,
          choices: backendChoices[answers.backend]
        }
      ]);
      
      // Confirm selection
      const confirmChoice = await prompt([
        {
          type: 'list',
          name: 'confirm',
          message: `You selected: ${frameworkAnswer.framework}. Is this correct?`,
          choices: [
            { name: 'Yes, continue', value: true },
            { name: 'No, choose again', value: false }
          ]
        }
      ]);
      
      if (confirmChoice.confirm) {
        answers.backendFramework = frameworkAnswer.framework;
        frameworkConfirmed = true;
      }
    }
  }
  
  // Ask for project destination path with confirmation
  let pathConfirmed = false;
  
  while (!pathConfirmed) {
    const pathAnswer = await prompt([
      {
        type: 'input',
        name: 'projectPath',
        message: 'Enter destination path for your project:',
        default: path.join(process.cwd(), 'ai-template-project')
      }
    ]);
    
    // Confirm selection
    const confirmChoice = await prompt([
      {
        type: 'list',
        name: 'confirm',
        message: `Project will be generated at: ${pathAnswer.projectPath}. Is this correct?`,
        choices: [
          { name: 'Yes, continue', value: true },
          { name: 'No, choose again', value: false }
        ]
      }
    ]);
    
    if (confirmChoice.confirm) {
      answers.projectPath = pathAnswer.projectPath;
      pathConfirmed = true;
    }
  }
  
  return answers;
}